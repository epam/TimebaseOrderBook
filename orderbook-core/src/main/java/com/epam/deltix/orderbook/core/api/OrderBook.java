/*
 * Copyright 2021 EPAM Systems, Inc
 *
 * See the NOTICE file distributed with this work for additional information
 * regarding copyright ownership. Licensed under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.epam.deltix.orderbook.core.api;


import com.epam.deltix.orderbook.core.options.Option;
import com.epam.deltix.timebase.messages.MessageInfo;
import com.epam.deltix.timebase.messages.universal.DataModelType;
import com.epam.deltix.timebase.messages.universal.QuoteSide;

/**
 * Order book for processing universal market data format that included in package (Package Header).
 * <p>
 * Market Data Format (also called "Universal format") is influenced by FIX Protocol and native APIs
 * of various trading systems that we have previously worked with. It is designed to provide high-level normalized
 * format suitable to capture data from majority of very different trading venues.
 * Package Type is enumeration of:
 * VENDOR_SNAPSHOT - snapshot that came directly from data vendor (e.g. exchange).
 * PERIODICAL_SNAPSHOT Synthetic snapshot generated by EPAM Market
 * Data Aggregation software to simplify data validation and allow late joiners (consumers that appear in the middle of trading session).
 * INCREMENTAL_UPDATE - incremental update, a list of insert/update/delete data entries.
 * This Format does not support snapshot and increment messages mixed in one package.
 * Trade entries can be easily combined with Increments.
 * It is important to differentiate one type of snapshot from another.
 * When you process market data stream a PERIODIC_SNAPSHOT can be skipped, whereas a VENDOR_SNAPSHOT must be processed in one way or another.
 * Periodical snapshot does not provide state change, it contains data to initialize state for new subscribers or to
 * initialize a backtesting run starting from a random point of time.
 * Whereas a vendor snapshot as a rule contains state changes and has been sent on the initiative of the vendor
 * or because some logic requested it (for example, because of possible error in the current state).
 *
 * @param <Quote> type of quote in order book
 * @author Andrii_Ostapenko1
 */
public interface OrderBook<Quote> {

    /**
     * Process financial market-related messages
     * <p>
     * Note: FlyWeight pattern in use. We don't keep any references on your classes (message) after method returns execution.
     * </p>
     * <p>
     * Supported market data messages: L1/L2/L3/ResetEntry,
     *
     * @param message Most financial market-related messages to use.
     * @return {@code true} if all entries of the package is process otherwise {@code false}
     * @see com.epam.deltix.timebase.messages.universal.PackageHeader
     * @see com.epam.deltix.timebase.messages.universal.L1EntryInterface
     * @see com.epam.deltix.timebase.messages.universal.L2EntryNewInterface
     * @see com.epam.deltix.timebase.messages.universal.L2EntryUpdateInterface
     * @see com.epam.deltix.timebase.messages.universal.BookResetEntryInterface
     * </p>
     */
    boolean update(MessageInfo message);

    /**
     * Returns true if this order book contains no quotes, applies to both sides of Order Book.
     *
     * @return true if this order book contains no elements
     */
    boolean isEmpty();

    /**
     * Set order book to empty state and returns all quotes into pool.
     */
    void clear();

    /**
     * Human-readable one-line description of the order book.
     *
     * @return description; never {@code null}
     */
    String getDescription();

    /**
     * Get quote levels(LEVEL_ONE / LEVEL_TWO ) for order book.
     *
     * @return - quote levels. never {@code null}
     * @see DataModelType
     */
    DataModelType getQuoteLevels();

    /**
     * Return stock symbol. Common, "human understood" representation of the security.
     * <p>
     * If you are sure that your market data contains data for only one stock symbol, you may not set this option.
     *
     * @return an {@code Optional} containing the stock symbol; never {@code null} but
     * potentially empty
     */
    Option<String> getSymbol();

    /**
     * Get market side.
     *
     * @param side - side of quote (ASk or BID) to use.
     * @return market side. never {@code null}
     * @see MarketSide
     */
    MarketSide<Quote> getMarketSide(QuoteSide side);

    /**
     * Get a list of stock exchanges with quotes.
     *
     * @return stock exchange list. never {@code null}
     * @see ExchangeList
     */
    ExchangeList<? extends Exchange<Quote>> getExchanges();

    /**
     * @return true if order book from this exchange is waiting for snapshot to recover.
     * In this state order book appears empty, but corresponding exchange is likely not empty.
     * Order book may be in this state initially, or after we market data disconnect, as well as after internal error.
     */
    boolean isWaitingForSnapshot();

}
