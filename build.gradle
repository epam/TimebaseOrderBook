import java.text.SimpleDateFormat

plugins {
    id 'net.nemerosa.versioning' version '2.6.1'
    id "me.champeau.jmh" version "0.6.6"
    id 'com.github.jk1.dependency-license-report' version '2.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

ext {
    publishingProjects = project('orderbook-core')
}

println "Running gradle version: $gradle.gradleVersion"

description = "Timebase OrderBook"

configure(allprojects) {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'

    archivesBaseName = 'timebase' + path.replace(':', '-')

    compileJava.options.encoding = 'UTF-8'
    sourceCompatibility = 11
    targetCompatibility = 11

    dependencyManagement {
        imports {
            mavenBom "org.junit:junit-bom:5.8.2"
            mavenBom "org.mockito:mockito-bom:4.6.1"
        }
        dependencies {
            dependencySet(group: 'com.epam.deltix', version: "${commonsVersion}") {
                entry('timebase-messages'){
                    exclude group: "org.apache.commons", name: "commons-lang"
                    exclude group: "com.epam.deltix", name: "containers"
                    exclude group: "com.epam.deltix", name: "hd-date-time"
                    exclude group: "com.epam.deltix", name: "gflog-api"
                    exclude group: "com.epam.deltix", name: "gflog-core"
                    exclude group: "com.epam.deltix", name: "dfp"
                }
            }

            dependency("com.epam.deltix:dfp:${dfpVersion}");

            dependency("com.epam.deltix:containers:${containerVersion}"){
                exclude group: "junit", name: "junit"
                exclude group: "com.epam.deltix", name: "dfp"
                exclude group: "com.epam.deltix", name: "hd-date-time"
            }

            dependencySet(group: 'com.epam.deltix', version: "${gflogVersion}") {
                entry "gflog-api"
                entry "gflog-core"
            }

            dependency("org.finos.timebase-ce:timebase-client:${timebaseVersion}")

            dependency('org.openjdk.jol:jol-core:0.1')
        }

        resolutionStrategy {
            cacheChangingModulesFor 0, "seconds"
        }
        repositories {
            mavenCentral()
        }
    }

    jar {
        manifest.attributes 'Implementation-Title': 'TimebaseOrderBook'
        manifest.attributes 'Implementation-Version': archiveVersion
        manifest.attributes 'Implementation-Vendor': 'EPAM'
        manifest.attributes 'Built-By': System.properties['user.name']
        manifest.attributes 'Build-Revision': versioning.info.commit
        manifest.attributes 'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date())
        manifest.attributes 'Created-By': "Gradle ${gradle.gradleVersion}"
        manifest.attributes 'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})"
        manifest.attributes 'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        from("$rootDir") {
            include 'LICENSE'
        }
    }

    test {
        ignoreFailures Boolean.getBoolean("test.ignoreFailures")
        reports.junitXml.required = true
        reports.junitXml.outputPerTestCase = true

        testLogging.exceptionFormat = "full"
        testLogging.events "passed", "skipped", "failed", "standardOut", "standardError"
        useJUnitPlatform()

        doLast {
            copy {
                from reports.junitXml.outputLocation include { "*.xml" }
                into file("$rootDir/build/reports/tests/xml")
            }
        }
    }

}

configure(publishingProjects) {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: "com.github.jk1.dependency-license-report"

    def isReleaseVersion = !version.endsWith("SNAPSHOT")

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set('sources')
        archiveBaseName.set(archivesBaseName)
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set('javadoc')
        archiveBaseName.set(archivesBaseName)
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    // License report extension

    licenseReport {
        excludeGroups = []
        excludes = ['com.sun.codemodel:codemodel-project', 'com.fasterxml.jackson:jackson-bom']

        configurations = ['runtimeClasspath']
        allowedLicensesFile = new File("$rootDir/allowed-licenses.json")
    }

    // Publishing to Maven Central

    def rUser = findProperty('SONATYPE_NEXUS_USERNAME') ?: System.getenv('SONATYPE_NEXUS_USERNAME') ?: "FakeUser"
    def rPass = findProperty('SONATYPE_NEXUS_PASSWORD') ?: System.getenv('SONATYPE_NEXUS_PASSWORD') ?: "FakePass"

    publishing {
        repositories {
            maven {
                url = findProperty('SONATYPE_REPOSITORY') ?: System.getenv('SONATYPE_REPOSITORY') ?: "FakeRepo"
                credentials {
                    username rUser
                    password rPass
                }
            }
        }

        publications {
            mavenJava(MavenPublication) {
                from components.java

                pom {
                    name = "TimebaseOrderBook"
                    packaging = 'jar'
                    description = 'High efficient garbage free orderbook for Java 11+'
                    url = 'https://github.com/epam/TimebaseOrderBook.git'

                    scm {
                        connection = 'scm:git:https://github.com/epam/TimebaseOrderBook.git'
                        developerConnection = 'scm:git:https://github.com/epam/TimebaseOrderBook.git'
                        url = 'https://github.com/epam/TimebaseOrderBook.git'
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'andriiostapenko'
                            name = 'Andrii Ostapenko'
                            email = 'Andrii_Ostapenko1@epam.com'
                            url = 'https://github.com/GregGGregGreG'
                            organization = 'EPAM Systems'
                            organizationUrl = 'https://www.epam.com/'
                        }
                    }
                }
            }
        }

        signing {
            def signingKey = findProperty('SIGNING_PRIVATE_KEY') ?: System.getenv('SIGNING_PRIVATE_KEY') ?: "FakeUser"
            def signingPassword = findProperty('SIGNING_PASSWORD') ?: System.getenv('SIGNING_PASSWORD') ?: "FakePass"

            useInMemoryPgpKeys(signingKey, signingPassword)
            sign publishing.publications.mavenJava

            required { isReleaseVersion }
        }
    }
}

task publishAll(dependsOn: publishingProjects.collect { it.path + ":publish" }) {
    group 'publishing'
    description 'Publish All Artifacts'
}

task checkLicenseAll(dependsOn: publishingProjects.collect { it.path + ":checkLicense" }) {
    group 'checking'
    description 'Check License All Artifacts'
}

wrapper {
    distributionType = Wrapper.DistributionType.BIN
}

build.dependsOn checkLicenseAll
